{"ast":null,"code":"var _jsxFileName = \"/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/modulo05/src/pages/Repository/index.js\";\n\n/* eslint-disable react/static-property-placement */\n\n/* eslint-disable react/state-in-constructor */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\nimport { Loading } from './styles';\nexport default class Repository extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      repository: {},\n      issues: [],\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      match\n    } = this.props;\n    const repoName = decodeURIComponent(match.params.repository);\n    const [repository, issues] = await Promise.all([api.get(`/repos/${repoName}`), api.get(`/repos/${repoName}/issues`, {\n      params: {\n        state: 'open',\n        per_page: 5\n      }\n    })]);\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false\n    });\n  }\n\n  render() {\n    const {\n      repository,\n      issues,\n      loading\n    } = this.state;\n\n    if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Carregando\");\n    }\n\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Repository\");\n  }\n\n}\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repository: PropTypes.string\n    })\n  }).isRequired\n};","map":{"version":3,"sources":["/Users/leticiabarreto/Documents/RocketSeat/GoStackAulas/modulo05/src/pages/Repository/index.js"],"names":["React","Component","PropTypes","api","Loading","Repository","state","repository","issues","loading","componentDidMount","match","props","repoName","decodeURIComponent","params","Promise","all","get","per_page","setState","data","render","propTypes","shape","string","isRequired"],"mappings":";;AAAA;;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,SAASC,OAAT,QAAwB,UAAxB;AAEA,eAAe,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAShDK,KATgD,GASxC;AACNC,MAAAA,UAAU,EAAE,EADN;AAENC,MAAAA,MAAM,EAAE,EAFF;AAGNC,MAAAA,OAAO,EAAE;AAHH,KATwC;AAAA;;AAehD,QAAMC,iBAAN,GAA0B;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKC,KAAvB;AACA,UAAMC,QAAQ,GAAGC,kBAAkB,CAACH,KAAK,CAACI,MAAN,CAAaR,UAAd,CAAnC;AAEA,UAAM,CAACA,UAAD,EAAaC,MAAb,IAAuB,MAAMQ,OAAO,CAACC,GAAR,CAAY,CAC7Cd,GAAG,CAACe,GAAJ,CAAS,UAASL,QAAS,EAA3B,CAD6C,EAE7CV,GAAG,CAACe,GAAJ,CAAS,UAASL,QAAS,SAA3B,EAAqC;AACnCE,MAAAA,MAAM,EAAE;AACNT,QAAAA,KAAK,EAAE,MADD;AAENa,QAAAA,QAAQ,EAAE;AAFJ;AAD2B,KAArC,CAF6C,CAAZ,CAAnC;AAUA,SAAKC,QAAL,CAAc;AACZb,MAAAA,UAAU,EAAEA,UAAU,CAACc,IADX;AAEZb,MAAAA,MAAM,EAAEA,MAAM,CAACa,IAFH;AAGZZ,MAAAA,OAAO,EAAE;AAHG,KAAd;AAKD;;AAEDa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEf,MAAAA,UAAF;AAAcC,MAAAA,MAAd;AAAsBC,MAAAA;AAAtB,QAAkC,KAAKH,KAA7C;;AAEA,QAAIG,OAAJ,EAAa;AACX,aAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AACD,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AA3C+C;AAA7BJ,U,CACZkB,S,GAAY;AACjBZ,EAAAA,KAAK,EAAET,SAAS,CAACsB,KAAV,CAAgB;AACrBT,IAAAA,MAAM,EAAEb,SAAS,CAACsB,KAAV,CAAgB;AACtBjB,MAAAA,UAAU,EAAEL,SAAS,CAACuB;AADA,KAAhB;AADa,GAAhB,EAIJC;AALc,C","sourcesContent":["/* eslint-disable react/static-property-placement */\n/* eslint-disable react/state-in-constructor */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport api from '../../services/api';\nimport { Loading } from './styles';\n\nexport default class Repository extends Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({\n        repository: PropTypes.string,\n      }),\n    }).isRequired,\n  };\n\n  state = {\n    repository: {},\n    issues: [],\n    loading: true,\n  };\n\n  async componentDidMount() {\n    const { match } = this.props;\n    const repoName = decodeURIComponent(match.params.repository);\n\n    const [repository, issues] = await Promise.all([\n      api.get(`/repos/${repoName}`),\n      api.get(`/repos/${repoName}/issues`, {\n        params: {\n          state: 'open',\n          per_page: 5,\n        },\n      }),\n    ]);\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { repository, issues, loading } = this.state;\n\n    if (loading) {\n      return <Loading>Carregando</Loading>\n    }\n    return <h1>Repository</h1>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}